# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest
stages:
- stage: Starting_point
  displayName: 'Starting point'
  jobs:
  - job: Job1
   
    steps:
    - script: echo j1 Hello, world!
    displayName: 'Run a one-line script for j1'


- stage: Stage_Component_A
  dependsOn: Starting_point
  displayName: 'Stage Component A'
  jobs:
 

  - job: Job4
   
    steps:
     - script: echo j4 Hello, world!
    displayName: 'Run a one-line script for j4'


- stage: Stage_Component_B
  dependsOn:
    - Starting_point
   
 
  displayName: 'Stage Component B'
  jobs:
  

  - job: Job4
   
    steps:
     - script: echo j4 Hello, world!
    displayName: 'Run a one-line script for j4'


- stage: Stage_Component_C 
  dependsOn:
    - Starting_point
    
   
  displayName: 'Stage Component C'

  jobs:
  

  - job: Job4
   
    steps:
     - script: echo j4 Hello, world!
    displayName: 'Run a one-line script for j4'

- stage: Product_Artifacts 
  dependsOn:
   - Stage_Component_A
   - Stage_Component_B
   - Stage_Component_C
  displayName: 'Product Artifacts'
  jobs:
 

  - job: Job4
   
    steps:
     - script: echo j4 Hello, world!
    displayName: 'Run a one-line script for j4'

- stage: Deploy_Application
  dependsOn: Product_Artifacts
  condition: succeeded(Product_Artifacts)
  displayName: 'Deploy Application'
  jobs:
  

  - job: Job4
   
    steps:
     - script: echo j4 Hello, world!
    displayName: 'Run a one-line script for j4'


- stage: Rolling_Back 
  dependsOn: 
    - Product_Artifacts
  condition: failed(Product_Artifacts)
  displayName: 'Rolling Back'
  jobs:
  - job: Job3
   
    steps:
    - script: echo j3 Hello, world!
    displayName: 'Run a one-line script for j3'




